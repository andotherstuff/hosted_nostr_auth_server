{"version":3,"file":"index-DXRWorLZ.js","sources":["../../node_modules/idb/build/index.js","../../src/main.ts"],"sourcesContent":["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n","// Frontend JavaScript logic (public/src/main.ts)\nimport { openDB, IDBPDatabase } from 'idb';\n// Import crypto libs (ensure they are installed)\n// import * as secp from '@noble/secp256k1';\n// import { argon2id } from '@scure/argon2';\n// import { chacha20poly1305 } from '@noble/chacha20poly1305';\n\nconsole.log(\"Main script loaded via Vite.\");\n\nconst DB_NAME = 'chusme-auth-vault';\nconst DB_VERSION = 1;\nconst KEY_STORE_NAME = 'encryptedKeys';\n\ninterface EncryptedKeyRecord {\n    id: number; // Usually just 1 for the single user key\n    publicKeyHex: string;\n    encryptedNsecBlob: Uint8Array; // Store blob as Uint8Array\n    argonSalt: Uint8Array;\n}\n\nlet db: IDBPDatabase | null = null;\n\nasync function initDB(): Promise<IDBPDatabase> {\n    if (db) return db;\n    db = await openDB(DB_NAME, DB_VERSION, {\n        upgrade(db) {\n            if (!db.objectStoreNames.contains(KEY_STORE_NAME)) {\n                db.createObjectStore(KEY_STORE_NAME, { keyPath: 'id' });\n                console.log(`Object store ${KEY_STORE_NAME} created.`);\n            }\n        },\n    });\n    console.log(\"Database initialized.\");\n    return db;\n}\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n    try {\n        await initDB();\n    } catch (error) {\n        console.error(\"Failed to initialize database:\", error);\n        alert(\"Error initializing local storage. Key management will not work.\");\n        // Disable buttons or show error state\n        return;\n    }\n\n    const generateBtn = document.getElementById('generate-key') as HTMLButtonElement;\n    const loadBtn = document.getElementById('load-key') as HTMLButtonElement;\n    const copyBtn = document.getElementById('copy-connection-string') as HTMLButtonElement;\n    const passphraseInput = document.getElementById('passphrase') as HTMLInputElement;\n    const keyStatusDiv = document.getElementById('key-status');\n    const connectionStringPre = document.getElementById('nip46-connection-string');\n\n    // Add checks to ensure elements exist\n    if (!generateBtn || !loadBtn || !copyBtn || !passphraseInput || !keyStatusDiv || !connectionStringPre) {\n        console.error(\"One or more required HTML elements not found.\");\n        alert(\"Initialization Error: UI elements missing. Cannot proceed.\");\n        return; \n    }\n\n    // --- Event Listeners ---\n\n    generateBtn.addEventListener('click', async () => {\n        const passphrase = passphraseInput.value;\n        if (!passphrase) {\n            alert('Please enter a passphrase.');\n            return;\n        }\n        console.log(\"Generate & Encrypt Key clicked\");\n        keyStatusDiv.textContent = 'Generating key...'; // Now safe to access\n\n        try {\n            // TODO: Implement key generation (e.g., secp.utils.randomPrivateKey())\n            const privateKeyBytes = new Uint8Array(32).fill(1); // STUB: Replace with actual generation\n            const publicKeyBytes = new Uint8Array(33).fill(2); // STUB: Replace with actual derivation\n            const publicKeyHex = bytesToHex(publicKeyBytes);\n\n            // TODO: Implement KDF (Argon2id)\n            const salt = window.crypto.getRandomValues(new Uint8Array(16));\n            const derivedKey = new Uint8Array(32).fill(3); // STUB: Replace with argon2id result\n            console.log(\"Derived key (stub)\", derivedKey);\n\n            // TODO: Implement encryption (ChaCha20-Poly1305)\n            // const cipher = chacha20poly1305(derivedKey);\n            // const nonce = window.crypto.getRandomValues(new Uint8Array(12));\n            // const encryptedNsecBlob = cipher.encrypt(nonce, privateKeyBytes);\n            const encryptedNsecBlob = new Uint8Array(privateKeyBytes.length + 16).fill(4); // STUB\n\n            // TODO: Store encrypted blob, pubkey, salt in IndexedDB\n            const record: EncryptedKeyRecord = {\n                id: 1,\n                publicKeyHex,\n                encryptedNsecBlob,\n                argonSalt: salt\n            };\n            if (!db) throw new Error(\"Database not initialized\"); // Add DB null check\n            await db.put(KEY_STORE_NAME, record);\n\n            keyStatusDiv.textContent = `Key generated & encrypted. Pubkey: ${publicKeyHex.substring(0, 10)}...`;\n            updateConnectionString(publicKeyHex);\n            alert('Key generation complete. Encrypted key stored locally.');\n\n        } catch (error: any) { // Added type for error\n            console.error(\"Key generation/encryption failed:\", error);\n            keyStatusDiv.textContent = 'Error generating key.';\n            alert(`Error: ${error.message}`);\n        }\n    });\n\n    loadBtn.addEventListener('click', async () => {\n        const passphrase = passphraseInput.value;\n        if (!passphrase) {\n            alert('Please enter a passphrase.');\n            return;\n        }\n        console.log(\"Load Encrypted Key clicked\");\n        keyStatusDiv.textContent = 'Loading key...'; // Safe\n\n        try {\n            // TODO: Load encrypted blob from IndexedDB\n            if (!db) throw new Error(\"Database not initialized\"); // Add DB null check\n            const record = await db.get(KEY_STORE_NAME, 1); // Remove generic type\n            if (!record) {\n                throw new Error(\"No key found in local storage.\");\n            }\n\n            // Type assertion might be needed here if inference isn't enough\n            const keyRecord = record as EncryptedKeyRecord; \n\n            // TODO: Implement KDF (Argon2id)\n            const derivedKey = new Uint8Array(32).fill(3); // STUB: Replace with argon2id result\n\n            // TODO: Implement decryption (ChaCha20-Poly1305)\n            // const cipher = chacha20poly1305(derivedKey);\n            // const nonce = keyRecord.encryptedNsecBlob.slice(0, 12); // Assuming nonce prepended\n            // const ciphertext = keyRecord.encryptedNsecBlob.slice(12);\n            // const decryptedNsecBytes = cipher.decrypt(nonce, ciphertext);\n            const decryptedNsecBytes = new Uint8Array(32).fill(1); // STUB\n\n            console.log(\"Decrypted Nsec (stub - DO NOT LOG IN PROD):\", bytesToHex(decryptedNsecBytes));\n\n            keyStatusDiv.textContent = `Key loaded. Pubkey: ${keyRecord.publicKeyHex.substring(0, 10)}...`;\n            updateConnectionString(keyRecord.publicKeyHex);\n            alert('Key loading complete.');\n\n        } catch (error: any) { // Added type for error\n            console.error(\"Key loading/decryption failed:\", error);\n            keyStatusDiv.textContent = 'Error loading key.';\n            alert(`Error: ${error.message}`);\n        }\n    });\n\n    copyBtn.addEventListener('click', () => {\n        if (connectionStringPre.textContent?.includes('<YOUR_PUBKEY>')) { // Added optional chaining\n            alert(\"Please generate or load a key first.\");\n            return;\n        }\n        navigator.clipboard.writeText(connectionStringPre.textContent ?? '') // Added nullish coalescing\n            .then(() => alert('Connection string copied to clipboard!'))\n            .catch(err => console.error('Failed to copy text: ', err));\n    });\n\n    // --- Initial Load --- \n    // Try to load existing key info to populate fields on page load\n    try {\n        if (!db) throw new Error(\"Database not initialized\"); // Add DB null check\n        const record = await db.get(KEY_STORE_NAME, 1); // Remove generic type\n        if (record) {\n             // Type assertion might be needed here if inference isn't enough\n            const keyRecord = record as EncryptedKeyRecord;\n            keyStatusDiv.textContent = `Existing key found. Pubkey: ${keyRecord.publicKeyHex.substring(0, 10)}...`; // Safe\n            updateConnectionString(keyRecord.publicKeyHex);\n        } else {\n            keyStatusDiv.textContent = 'Status: No key loaded.'; // Safe\n            updateConnectionString(); // Show placeholder\n        }\n    } catch (error: any) { // Added type for error\n         console.error(\"Failed to load initial key state:\", error);\n         keyStatusDiv.textContent = 'Error loading key status.'; // Safe\n         updateConnectionString(); // Show placeholder\n    }\n});\n\n// --- Utility Functions ---\n\nfunction updateConnectionString(publicKeyHex = '<YOUR_PUBKEY>') {\n    const connectionStringPre = document.getElementById('nip46-connection-string');\n    if (connectionStringPre) { // Add null check\n        const workerUrl = window.location.origin;\n        connectionStringPre.textContent = `nostrconnect://${publicKeyHex}?relay=${workerUrl}`;\n    }\n}\n\nfunction bytesToHex(bytes: Uint8Array): string {\n    return Array.from(bytes, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n// function hexToBytes(hex: string): Uint8Array { ... }"],"names":["instanceOfAny","object","constructors","c","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","getCursorAdvanceMethods","transactionDoneMap","transformCache","reverseTransformCache","promisifyRequest","request","promise","resolve","reject","unlisten","success","error","wrap","cacheDonePromiseForTransaction","tx","done","complete","idbProxyTraps","target","prop","receiver","value","replaceTraps","callback","wrapFunction","func","args","unwrap","transformCachableValue","newValue","openDB","name","version","blocked","upgrade","blocking","terminated","openPromise","event","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","method","storeName","oldTraps","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","cursor","proxiedCursor","isIteratorProp","DB_NAME","DB_VERSION","KEY_STORE_NAME","initDB","generateBtn","loadBtn","copyBtn","passphraseInput","keyStatusDiv","connectionStringPre","privateKeyBytes","publicKeyBytes","publicKeyHex","bytesToHex","salt","derivedKey","encryptedNsecBlob","record","updateConnectionString","keyRecord","decryptedNsecBytes","_a","err","workerUrl","bytes","byte"],"mappings":"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","x_google_ignoreList":[0]}